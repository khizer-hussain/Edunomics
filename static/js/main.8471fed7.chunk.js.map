{"version":3,"sources":["components/users/Search.js","components/users/Users.js","components/layout/Navbar.js","components/users/Pagination.js","App.js","serviceWorker.js","index.js"],"names":["Search","state","text","onChange","e","setState","target","name","value","onSubmit","preventDefault","props","searchUsers","this","className","type","placeholder","Component","Users","users","map","user","id","username","email","phone","Navbar","Pagination","usersPerPage","totalUsers","paginate","pageNumbers","i","Math","ceil","push","number","key","onClick","href","App","useState","setUsers","currentPage","setCurrentPage","useEffect","fetchUsers","a","axios","get","res","data","indexOfLastUser","indexOfFirstUser","currentUser","slice","length","pageNumber","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gTA2BeA,EAzBf,2MACIC,MAAQ,CACJC,KAAM,IAFd,EAKIC,SAAU,SAACC,GAAD,OAAO,EAAKC,SAAL,eAAiBD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,SAL/D,EAOIC,SAAW,SAAAL,GACPA,EAAEM,iBACF,EAAKC,MAAMC,YAAY,EAAKX,MAAMC,MAClC,EAAKG,SAAS,CAAEH,KAAM,MAV9B,wEAcQ,OACI,6BACI,0BAAMO,SAAUI,KAAKJ,SAAUK,UAAU,QACrC,2BAAOC,KAAK,OAAOR,KAAK,OAAOS,YAAY,wBAAwBR,MAAOK,KAAKZ,MAAMC,KAAMC,SAAUU,KAAKV,WAC1G,2BAAOY,KAAK,SAASP,MAAM,SAASM,UAAU,iCAlBlE,GAA4BG,aCiCbC,G,MA/BD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAIT,OACI,2BAAOL,UAAU,aACb,+BACI,4BACI,kCACA,oCACA,yCACA,qCACA,uCAGR,+BACCK,EAAMC,KAAI,SAAAC,GAAI,OACX,4BACI,4BAAKA,EAAKC,IACV,4BAAKD,EAAKd,MACV,4BAAKc,EAAKE,UACV,4BAAKF,EAAKG,OACV,4BAAKH,EAAKI,eCdnBC,EAVf,iLAEQ,OACI,yBAAKZ,UAAU,kBACX,qDAJhB,GAA4BG,aCuBbU,EAvBI,SAAC,GAGhB,IAH4D,IAA1CC,EAAyC,EAAzCA,aAAcC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,SACtCC,EAAc,GAEZC,EAAI,EAAGA,GAAKC,KAAKC,KAAKL,EAAaD,GAAeI,IACtDD,EAAYI,KAAKH,GAGrB,OACI,6BACI,wBAAIlB,UAAU,cACTiB,EAAYX,KAAI,SAAAgB,GAAM,OACnB,wBAAIC,IAAKD,EAAQtB,UAAU,aACvB,uBAAGwB,QAAS,kBAAMR,EAASM,IAASG,KAAK,KAAKzB,UAAU,aACnDsB,U,iBC8CdI,EArDH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTtB,EADS,KACFuB,EADE,OAEsBD,mBAAS,GAF/B,mBAETE,EAFS,KAEIC,EAFJ,OAGOH,mBAAS,GAAzBb,EAHS,oBAOhBiB,qBAAU,WACR,IAAMC,EAAU,uCAAG,4BAAAC,EAAA,sEACCC,IAAMC,IAAI,6CADX,OACXC,EADW,OAEjBR,EAASQ,EAAIC,MAFI,2CAAH,sDAIC,uCAAG,WAAMjD,GAAN,eAAA6C,EAAA,sEACAC,IAAMC,IAAN,sDAAyD/C,IADzD,OACZgD,EADY,OAElBR,EAASQ,EAAIC,MAFK,2CAAH,sDAIjBvC,GAEAkC,MACC,IAQH,IAAMM,EAAkBT,EAAcf,EAChCyB,EAAmBD,EAAkBxB,EACrC0B,EAAcnC,EAAMoC,MAAMF,EAAkBD,GAShD,OACE,yBAAKtC,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,aACb,kBAAC,EAAD,CAAQF,YAAaiC,YAAUjC,cAC/B,kBAAC,EAAD,CAAOO,MAAOmC,IACd,kBAAC,EAAD,CAAY1B,aAAcA,EAAcC,WAAYV,EAAMqC,OAAQ1B,SAVzD,SAAC2B,GAAD,OAAgBb,EAAea,SC9B9BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8471fed7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport class Search extends Component {\r\n    state = {\r\n        text: ''\r\n    };\r\n\r\n    onChange =(e) => this.setState({ [e.target.name]: e.target.value });\r\n\r\n    onSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.searchUsers(this.state.text);\r\n        this.setState({ text: '' });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <form onSubmit={this.onSubmit} className=\"form\">\r\n                    <input type=\"text\" name=\"text\" placeholder=\"Search Name Here.....\" value={this.state.text} onChange={this.onChange} />\r\n                    <input type=\"submit\" value=\"Search\" className=\"btn btn-dark btn-block\" />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search","import React from \"react\";\r\n\r\n\r\n\r\nconst Users = ({ users }) => {\r\n\r\n    \r\n    \r\n        return(\r\n            <table className=\"btn-block\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>ID</th>\r\n                        <th>Name</th>\r\n                        <th>User Name</th>\r\n                        <th>Email</th>\r\n                        <th>Phone</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                {users.map(user => (\r\n                    <tr>\r\n                        <td>{user.id}</td>\r\n                        <td>{user.name}</td>\r\n                        <td>{user.username}</td>\r\n                        <yd>{user.email}</yd>\r\n                        <td>{user.phone}</td>\r\n                    </tr>\r\n                ))}\r\n                </tbody>\r\n            </table>\r\n        )\r\n    \r\n}\r\n\r\nexport default Users","import React, { Component } from \"react\";\r\n\r\nexport class Navbar extends Component {\r\n    render() {\r\n        return(\r\n            <nav className=\"navbar bg-dark\">\r\n                <h1>Edunomics Search</h1>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\n\r\nconst Pagination = ({ usersPerPage, totalUsers, paginate }) => {\r\n    const pageNumbers = [];\r\n\r\n    for(let i = 1; i <= Math.ceil(totalUsers / usersPerPage); i++) {\r\n        pageNumbers.push(i);\r\n    }\r\n\r\n    return (\r\n        <nav>\r\n            <ul className=\"pagination\">\r\n                {pageNumbers.map(number => (\r\n                    <li key={number} className=\"page-item\">\r\n                        <a onClick={() => paginate(number)} href=\"!#\" className=\"page-link\">\r\n                            {number}\r\n                        </a>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </nav>\r\n    )\r\n\r\n}\r\n\r\nexport default Pagination","import React, { useState, useEffect } from 'react';\nimport Search from './components/users/Search';\nimport './App.css';\nimport Users from './components/users/Users';\nimport Navbar from './components/layout/Navbar';\nimport Pagination from './components/users/Pagination'\nimport axios from 'axios';\n\nconst App = () => {\n  const [users, setUsers] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [usersPerPage] = useState(3);\n  \n\n  \n  useEffect(() => {\n    const fetchUsers = async () => {\n      const res = await axios.get('http://jsonplaceholder.typicode.com/users');\n      setUsers(res.data);\n    }\n    const searchUsers = async text => {\n      const res = await axios.get(`http://jsonplaceholder.typicode.com/users?q=${text}`);\n      setUsers(res.data);\n    }\n    searchUsers();\n    \n    fetchUsers();\n  }, []);\n\n  \n\n  \n\n  \n  \n  const indexOfLastUser = currentPage * usersPerPage;\n  const indexOfFirstUser = indexOfLastUser - usersPerPage;\n  const currentUser = users.slice(indexOfFirstUser, indexOfLastUser);\n\n\n\n\n  const paginate = (pageNumber) => setCurrentPage(pageNumber);\n  \n  \n    \n    return (\n      <div className=\"App\">\n        <Navbar />\n        <div className=\"container\">\n          <Search searchUsers={useEffect.searchUsers} />\n          <Users users={currentUser} />\n          <Pagination usersPerPage={usersPerPage} totalUsers={users.length} paginate={paginate} />\n          \n        </div>\n      </div>\n    );\n  \n  \n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}